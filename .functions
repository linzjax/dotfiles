#!/usr/bin/env bash

# Use this to import an existing database to a local database.
# This relies on the target database being the default one `psql` connects to,
# which you can control using environment variables, such as:
#
# export PGHOST=/path/to/postgres/instance/if/not/default
# export PGDATABASE=db_name
#
# Then, invoke this script with the existing database's URL:
#
# $ ./import_db.sh postgresql:///username:password@heroku-postgres-instance.com:5234/myexistingdatabase
#
function cpdb() {
  REMOTE_DB=$1

  read -p "Is this the remote db's URL? $REMOTE_DB [Y/n] " -n 1 yn
  case $yn in
    [Y]* ) echo "";;
    * ) exit;;
  esac

  pg_dump "$REMOTE_DB" -O -x | psql
}

function start-docker() {
  docker-machine start
  eval "$(docker-machine env default)"
  echo "Docker reporting for duty!"
}

function stop-docker() {
  docker-machine stop
  echo "Say goodnight Docker! 'Goodnight Docker!'"
}

function eval-docker() {
  eval "$(docker-machine env default)"
}

function bastion() {
  ssh -A ljacks@bastion.primary.com
}

function tunnel-to-dev () {
    echo http://$(ipconfig getifaddr en0):9000
    ssh -nNT -L 0.0.0.0:9000:$(docker-machine ip):3000 $USER@localhost
}

